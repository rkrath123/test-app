name: CI/CD

on:
  push:
    branches:
      - main  # This will trigger on pushes to the 'main' branch.
  pull_request:
    branches:
      - main  # This will trigger on pull requests targeting the 'main' branch.

jobs:
  build:
    runs-on: ubuntu-latest  # GitHub-hosted runner (Ubuntu)
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # This action checks out your repository.

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
        
      # Log in to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/sample-website:latest

  deploy:
    runs-on: ubuntu-latest  # GitHub-hosted runner for deployment
    
    needs: build  # Ensures that the deploy job runs after the build job completes.

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Deploy to remote server via SSH
      - name: Deploy to Server
        uses: appleboy/ssh-action@v0.1.3
        with:
          host: ${{ secrets.SERVER_HOST }}  # The server IP or hostname (GitHub Secret)
          username: ${{ secrets.SERVER_USER }}  # SSH username (GitHub Secret)
          key: ${{ secrets.SERVER_SSH_KEY }}  # Private SSH key (GitHub Secret)
          port: ${{ secrets.SERVER_PORT }}  # SSH port (GitHub Secret)
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/sample-website:latest
            docker stop sample-website || true
            docker rm sample-website || true
            docker run -d -p 80:80 --name sample-website ${{ secrets.DOCKER_USERNAME }}/sample-website:latest
